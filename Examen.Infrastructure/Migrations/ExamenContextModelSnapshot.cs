// <auto-generated />
using System;
using Examen.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Examen.Infrastructure.Migrations
{
    [DbContext(typeof(ExamenContext))]
    partial class ExamenContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.27")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Banque", b =>
                {
                    b.Property<int>("code")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("code"), 1L, 1);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nom")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Rue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Ville")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("code");

                    b.ToTable("Banques");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Compte", b =>
                {
                    b.Property<string>("NumeroCompte")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("BanqueFK")
                        .HasColumnType("int");

                    b.Property<string>("Proprietaire")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Solde")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Type")
                        .HasColumnType("int");

                    b.HasKey("NumeroCompte");

                    b.HasIndex("BanqueFK");

                    b.ToTable("Comptes");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.DAB", b =>
                {
                    b.Property<string>("DABid")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Localisation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DABid");

                    b.ToTable("DAB");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Transaction", b =>
                {
                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompteFk")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("DABFk")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("Montant")
                        .HasColumnType("int");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int");

                    b.HasKey("Date", "CompteFk", "DABFk");

                    b.HasIndex("CompteFk");

                    b.HasIndex("DABFk");

                    b.ToTable("Transactions");

                    b.HasDiscriminator<int>("TransactionType").HasValue(0);
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.TransactionRetraite", b =>
                {
                    b.HasBaseType("Examen.ApplicationCore.Domain.Transaction");

                    b.Property<bool>("AutreAgence")
                        .HasColumnType("bit");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.TransactionTransfert", b =>
                {
                    b.HasBaseType("Examen.ApplicationCore.Domain.Transaction");

                    b.Property<string>("NumeroCompte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Compte", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Banque", "banque")
                        .WithMany("compte")
                        .HasForeignKey("BanqueFK")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("banque");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Transaction", b =>
                {
                    b.HasOne("Examen.ApplicationCore.Domain.Compte", "compte")
                        .WithMany("transactions")
                        .HasForeignKey("CompteFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Examen.ApplicationCore.Domain.DAB", "dAB")
                        .WithMany("transaction")
                        .HasForeignKey("DABFk")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("compte");

                    b.Navigation("dAB");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Banque", b =>
                {
                    b.Navigation("compte");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.Compte", b =>
                {
                    b.Navigation("transactions");
                });

            modelBuilder.Entity("Examen.ApplicationCore.Domain.DAB", b =>
                {
                    b.Navigation("transaction");
                });
#pragma warning restore 612, 618
        }
    }
}
